{
	"info": {
		"_postman_id": "a7941bc4-df5c-498d-8948-e4a590be7102",
		"name": "Postman_2",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "17637654"
	},
	"item": [
		{
			"name": "Task_1:_162.55.220.72:5005/first",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"// Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// Проверить, что в body приходит правильный string.\r",
							"pm.test(\"1. Body matches string\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"This is the first responce from server!\");\r",
							"});\r",
							"\r",
							"// Проверить, что в body приходит правильный string.\r",
							"pm.test(\"1.1 Body matches string\", function () {\r",
							"    pm.expect(pm.response).to.have.body(\"This is the first responce from server!!\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/first",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"first"
					]
				}
			},
			"response": []
		},
		{
			"name": "Task_2:_162.55.220.72:5005/user_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1.Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"let resData = pm.response.json();\r",
							"\r",
							"// 4. Проверить, что name в ответе равно name s request (name вбить руками.)\r",
							"\r",
							"pm.test(\"Test value name\", function () {\r",
							"    pm.expect(\"Sergey\").to.eql(resData.name);\r",
							"});\r",
							"\r",
							"// 5. Проверить, что age в ответе равно age s request (age вбить руками.)\r",
							"\r",
							"pm.test(\"Test value age\", function () {\r",
							"    pm.expect(\"36\").to.eql(resData.age);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что salary в ответе равно salary s request (salary вбить руками.)\r",
							"\r",
							"pm.test(\"Test value salary\", function () {\r",
							"    pm.expect(10000).to.eql(resData.salary);\r",
							"});\r",
							"\r",
							"// 7. Спарсить request.\r",
							"\r",
							"let reqData = request.data;\r",
							"\r",
							"// 8. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"pm.test(\"Test value resData.name === reqData.name\", function () {\r",
							"    pm.expect(reqData.name).to.eql(resData.name);\r",
							"});\r",
							"\r",
							"// 9. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"\r",
							"pm.test(\"Test value resData.age === reqData.age\", function () {\r",
							"    pm.expect(reqData.age).to.eql(resData.age);\r",
							"});\r",
							"\r",
							"// 10. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Test value resData.salary === reqData.salary\", function () {\r",
							"    pm.expect(Number(reqData.salary)).to.eql(resData.salary);\r",
							"});\r",
							"\r",
							"// 11. Вывести в консоль параметр family из response.\r",
							"\r",
							"console.log(resData.family);\r",
							"\r",
							"// 12. Проверить что u_salary_1_5_year в ответе равно salary*4 (salary забрать из request)\r",
							"\r",
							"let u_salary_1_5_year_res = resData.family.u_salary_1_5_year;\r",
							"let reqSalary = reqData.salary * 4;\r",
							"pm.test(\"Test value u_salary_1_5_year_res = jsonData.salary * 4\", function () {\r",
							"    pm.expect(u_salary_1_5_year_res).to.eql(reqSalary);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "name",
							"value": "Sergey",
							"type": "text"
						},
						{
							"key": "age",
							"value": "36",
							"type": "text"
						},
						{
							"key": "salary",
							"value": "10000",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_3",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_3"
					]
				}
			},
			"response": []
		},
		{
			"name": "Task_3:_162.55.220.72:5005/object_info_3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"\r",
							"let resData = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"\r",
							"let reqData = pm.request.url.query.toObject();\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"pm.test(\"Test value resData.name === reqData.name\", function () {\r",
							"    pm.expect(resData.name).to.eql(reqData.name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age s request (age забрать из request.)\r",
							"\r",
							"pm.test(\"Test value resData.age === reqData.age\", function () {\r",
							"    pm.expect(resData.age).to.eql(reqData.age);\r",
							"});\r",
							"\r",
							"// 7. Проверить, что salary в ответе равно salary s request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"Test value resData.salary === reqData.salary\", function () {\r",
							"    pm.expect(resData.salary).to.eql(+reqData.salary);\r",
							"});\r",
							"\r",
							"// 8. Вывести в консоль параметр family из response.\r",
							"\r",
							"console.log(resData.family)\r",
							"\r",
							"// 9. Проверить, что у параметра dog есть параметры name.\r",
							"\r",
							"pm.test(\"1.Dog have a name\", function () {\r",
							"    pm.expect(JSON.stringify(resData.family.pets.dog)).to.include(\"name\");\r",
							"});\r",
							"\r",
							"pm.test(\"2.Dog have a name\", function() {\r",
							"  pm.expect(resData.family.pets.dog).to.have.property(\"name\");\r",
							"});\r",
							"\r",
							"// 10. Проверить, что у параметра dog есть параметры age.\r",
							"\r",
							"pm.test(\"1.Dog have a age\", function () {\r",
							"    pm.expect(JSON.stringify(resData.family.pets.dog)).to.include(\"age\");\r",
							"});\r",
							"\r",
							"pm.test(\"2.Dog have a age\", function() {\r",
							"  pm.expect(resData.family.pets.dog).to.have.property(\"age\");\r",
							"});\r",
							"\r",
							"// 11. Проверить, что параметр name имеет значение Luky.\r",
							"\r",
							"pm.test(\"Dog have a name - 'Luky'\", function () {\r",
							"    pm.expect(resData.family.pets.dog.name).to.eql(\"Luky\");\r",
							"});\r",
							"\r",
							"// 12. Проверить, что параметр age имеет значение 4.\r",
							"\r",
							"pm.test(\"Dog age - '4'\", function () {\r",
							"    pm.expect(resData.family.pets.dog.age).to.eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_3?name=Marusya&age=18&salary=500",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_3"
					],
					"query": [
						{
							"key": "name",
							"value": "Marusya"
						},
						{
							"key": "age",
							"value": "18"
						},
						{
							"key": "salary",
							"value": "500"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Task_4:_162.55.220.72:5005/object_info_4",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// 1. Отправить запрос.\r",
							"// 2. Статус код 200\r",
							"\r",
							"pm.test(\"1. Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 3. Спарсить response body в json.\r",
							"\r",
							"let resData = pm.response.json();\r",
							"\r",
							"// 4. Спарсить request.\r",
							"\r",
							"let reqData = pm.request.url.query.toObject();\r",
							"\r",
							"// 5. Проверить, что name в ответе равно name s request (name забрать из request.)\r",
							"\r",
							"pm.test(\"2. Test value resData.name === reqData.name\", function () {\r",
							"    pm.expect(resData.name).to.eql(reqData.name);\r",
							"});\r",
							"\r",
							"// 6. Проверить, что age в ответе равно age из request (age забрать из request.)\r",
							"\r",
							"pm.test(\"3. Test value resData.age === reqData.age\", function () {\r",
							"    pm.expect(resData.age).to.eql(+reqData.age);\r",
							"});\r",
							"\r",
							"// 7. Вывести в консоль параметр salary из request.\r",
							"\r",
							"// строка\r",
							"console.log(reqData.age)\r",
							"// число\r",
							"console.log(+reqData.age)\r",
							"\r",
							"// 8. Вывести в консоль параметр salary из response.\r",
							"\r",
							"console.log(resData.salary)\r",
							"\r",
							"// 9. Вывести в консоль 0-й элемент параметра salary из response.\r",
							"\r",
							"console.log(resData.salary[0])\r",
							"\r",
							"// 10. Вывести в консоль 1-й элемент параметра salary параметр salary из response.\r",
							"\r",
							"console.log(resData.salary[1])\r",
							"\r",
							"// 11. Вывести в консоль 2-й элемент параметра salary параметр salary из response.\r",
							"\r",
							"console.log(resData.salary[2])\r",
							"\r",
							"// 12. Проверить, что 0-й элемент параметра salary равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"4. resData.salary[0] === reqData.salary\", function () {\r",
							"    pm.expect(resData.salary[0]).to.eql(+reqData.salary);\r",
							"});\r",
							"\r",
							"\r",
							"// 13. Проверить, что 1-й элемент параметра salary равен salary*2 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"5. resData.salary[1] === reqData.salary\", function () {\r",
							"    pm.expect(+resData.salary[1]).to.eql(+reqData.salary*2);\r",
							"});\r",
							"\r",
							"// 14. Проверить, что 2-й элемент параметра salary равен salary*3 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"6. resData.salary[2] === reqData.salary\", function () {\r",
							"    pm.expect(+resData.salary[2]).to.eql(+reqData.salary*3);\r",
							"});\r",
							"\r",
							"// 15. Создать в окружении переменную name\r",
							"// 16. Создать в окружении переменную age\r",
							"// 17. Создать в окружении переменную salary\r",
							"// 18. Передать в окружение переменную name\r",
							"\r",
							"pm.environment.set(\"name\", \"Superman\");\r",
							"\r",
							"// 19. Передать в окружение переменную age\r",
							"\r",
							"pm.environment.set(\"age\", \"35\");\r",
							"\r",
							"// 20. Передать в окружение переменную salary\r",
							"\r",
							"pm.environment.set(\"salary\", \"10000\");\r",
							"\r",
							"// 21. Написать цикл который выведет в консоль по порядку элементы списка из параметра salary.\r",
							"\r",
							"// что бы запустить как тест снять комментарий с 2х строк ниже\r",
							"// pm.test(\"7. All Salary\", function () {\r",
							"resData.salary.forEach( salary => console.log(\"salary -- \" + salary));\r",
							"// })\r",
							"\r",
							"// через цикл for и  другой вывод console.log\r",
							"\r",
							"for (let i =0; i < resData.salary.length; i++)\r",
							"console.log(\"salary \", resData.salary[i]);\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://162.55.220.72:5005/object_info_4?name={{name}}&age={{age}}&salary={{salary}}",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"object_info_4"
					],
					"query": [
						{
							"key": "name",
							"value": "{{name}}"
						},
						{
							"key": "age",
							"value": "{{age}}"
						},
						{
							"key": "salary",
							"value": "{{salary}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Task_5:_162.55.220.72:5005/user_info_2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"// http://162.55.220.72:5005/user_info_2\r",
							"// 1. Вставить параметр salary из окружения в request\r",
							"// 2. Вставить параметр age из окружения в age\r",
							"// 3. Вставить параметр name из окружения в name\r",
							"// 4. Отправить запрос.\r",
							"// 5. Статус код 200\r",
							"\r",
							"pm.test(\"1. Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"// 6. Спарсить response body в json.\r",
							"\r",
							"let resData = pm.response.json();\r",
							"\r",
							"// 7. Спарсить request.\r",
							"\r",
							"let reqData = request.data;\r",
							"\r",
							"// 8. Проверить, что json response имеет параметр start_qa_salary\r",
							"\r",
							"pm.test(\"2.1 json response have to property start_qa_salary with stringify\", function () {\r",
							"    pm.expect(JSON.stringify(resData)).to.include(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"pm.test(\"2.2 json response have to property start_qa_salary\", function() {\r",
							"  pm.expect(resData).to.have.property(\"start_qa_salary\");\r",
							"});\r",
							"\r",
							"// 9. Проверить, что json response имеет параметр qa_salary_after_6_months\r",
							"\r",
							"pm.test(\"3. json response have to property qa_salary_after_6_months\", function() {\r",
							"  pm.expect(resData).to.have.property(\"qa_salary_after_6_months\");\r",
							"});\r",
							"\r",
							"// 10. Проверить, что json response имеет параметр qa_salary_after_12_months\r",
							"\r",
							"pm.test(\"4. json response have to property qa_salary_after_12_months\", function() {\r",
							"  pm.expect(resData).to.have.property(\"qa_salary_after_12_months\");\r",
							"});\r",
							"\r",
							"// 11. Проверить, что json response имеет параметр qa_salary_after_1.5_year\r",
							"\r",
							"pm.test(\"5. json response have to property qa_salary_after_1.5_year\", function() {\r",
							"  pm.expect(JSON.stringify(resData)).to.include(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"pm.test(\"5.1 json response have to property qa_salary_after_1.5_year\", function() {\r",
							"  pm.expect(resData).to.have.property(\"qa_salary_after_1.5_year\");\r",
							"});\r",
							"\r",
							"// 12. Проверить, что json response имеет параметр qa_salary_after_3.5_years\r",
							"\r",
							"pm.test(\"6. json response have to property qa_salary_after_3.5_years\", function() {\r",
							"  pm.expect(resData).to.have.property(\"qa_salary_after_3.5_years\");\r",
							"});\r",
							"\r",
							"// 13. Проверить, что json response имеет параметр person\r",
							"\r",
							"pm.test(\"7. json response have to property person\", function() {\r",
							"  pm.expect(resData).to.have.property(\"person\");\r",
							"});\r",
							"\r",
							"// 14. Проверить, что параметр start_qa_salary равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"8. Test value resData.start_qa_salary === reqData.salary\", function () {\r",
							"    pm.expect(resData.start_qa_salary).to.eql(+reqData.salary);\r",
							"});\r",
							"\r",
							"// 15. Проверить, что параметр qa_salary_after_6_months равен salary*2 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"9. Test value resData.qa_salary_after_6_months === reqData.salary*2\", function () {\r",
							"    pm.expect(resData.qa_salary_after_6_months).to.eql(+reqData.salary * 2);\r",
							"});\r",
							"\r",
							"// 16. Проверить, что параметр qa_salary_after_12_months равен salary*2.7 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"10. Test value resData.qa_salary_after_12_months === reqData.salary*2.7\", function () {\r",
							"    pm.expect(resData.qa_salary_after_12_months).to.eql(+reqData.salary * 2.7);\r",
							"});\r",
							"\r",
							"// 17. Проверить, что параметр qa_salary_after_1.5_year равен salary*3.3 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"11. Test value resData.qa_salary_after_1.5_year === reqData.salary*3.3\", function () {\r",
							"    pm.expect(resData['qa_salary_after_1.5_year']).to.eql(+reqData.salary * 3.3);\r",
							"});\r",
							"\r",
							"// 18. Проверить, что параметр qa_salary_after_3.5_years равен salary*3.8 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"12. Test value resData.qa_salary_after_3.5_years === reqData.salary*3.8\", function () {\r",
							"    pm.expect(resData['qa_salary_after_3.5_years']).to.eql(+reqData.salary * 3.8);\r",
							"});\r",
							"\r",
							"// 19. Проверить, что в параметре person, 1-й элемент из u_name равен salary из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"13. Test value resData.person.u_name[1] === reqData.salary\", function () {\r",
							"    pm.expect(resData.person.u_name[1]).to.eql(+reqData.salary);\r",
							"});\r",
							"\r",
							"// 20. Проверить, что что параметр u_age равен age из request (age забрать из request.)\r",
							"\r",
							"pm.test(\"14. Test value resData.person.u_name[1] === reqData.age\", function () {\r",
							"    pm.expect(resData.person.u_age).to.eql(+reqData.age);\r",
							"});\r",
							"\r",
							"// 21. Проверить, что параметр u_salary_5_years равен salary*4.2 из request (salary забрать из request.)\r",
							"\r",
							"pm.test(\"15. Test value resData.person.u_salary_5_years === reqData.salary*4.2\", function () {\r",
							"    pm.expect(resData.person.u_salary_5_years).to.eql(+reqData.salary*4.2);\r",
							"});\r",
							"\r",
							"// 22. ***Написать цикл который выведет в консоль по порядку элементы списка из параметра person.\r",
							"\r",
							"pm.test (\"16. All property person only key\" , function () {\r",
							"for (let property in resData.person){\r",
							"console.log(property);\r",
							"}\r",
							"});\r",
							"\r",
							"\r",
							"pm.test (\"17. All property person\" , function () {\r",
							"for (let property in resData.person){\r",
							"console.log(`${property}: ${resData.person[property]}`);\r",
							"}\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "salary",
							"value": "{{salary}}",
							"type": "text"
						},
						{
							"key": "age",
							"value": "{{age}}",
							"type": "text"
						},
						{
							"key": "name",
							"value": "{{name}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://162.55.220.72:5005/user_info_2",
					"protocol": "http",
					"host": [
						"162",
						"55",
						"220",
						"72"
					],
					"port": "5005",
					"path": [
						"user_info_2"
					]
				}
			},
			"response": []
		}
	]
}